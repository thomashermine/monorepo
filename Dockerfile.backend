# Dockerfile.backend
#
# This Dockerfile is used to build the backend app in apps/
# It automatically builds all packages in packages/* that have a build script.
#
# Pass the name of the app as follows:
# docker build -t my-backend -f Dockerfile.backend --build-arg APP_NAME=backend .
#
# ======================================================================================================================
# Builder
# ======================================================================================================================
FROM node:24-alpine AS builder

# Define build argument for app name
ARG APP_NAME=backend

# Install pnpm
RUN corepack enable && corepack prepare pnpm@10.18.0 --activate

WORKDIR /app

# Copy workspace configuration files
COPY pnpm-workspace.yaml package.json pnpm-lock.yaml ./
COPY tsconfig.base.json ./

# Copy all package.json files for dependency installation
# for selected app + all packages
COPY apps/${APP_NAME}/package.json ./apps/${APP_NAME}/
# Copy packages directory structure (wildcard doesn't preserve subdirs, so we copy all and clean up)
COPY packages ./packages
RUN find packages -mindepth 2 -type f ! -name 'package.json' -delete && \
    find packages -mindepth 2 -type d -empty -delete

# Install all dependencies (including dev dependencies for building)
RUN pnpm install --frozen-lockfile

# Copy source code for all workspace packages
COPY packages ./packages
# Copy source code for selected app
COPY apps/${APP_NAME} ./apps/${APP_NAME}

# Build the backend application
WORKDIR /app/apps/${APP_NAME}
RUN pnpm run build

# ======================================================================================================================
# Server
# ======================================================================================================================
FROM node:24-alpine

# Define build argument for app name
ARG APP_NAME=backend

# Install pnpm
RUN corepack enable && corepack prepare pnpm@10.18.0 --activate

WORKDIR /app

# Copy workspace configuration
COPY pnpm-workspace.yaml package.json pnpm-lock.yaml ./
COPY tsconfig.base.json ./

# Copy package.json files for production dependencies
COPY apps/${APP_NAME}/package.json ./apps/${APP_NAME}/
COPY packages ./packages
RUN find packages -mindepth 2 -type f ! -name 'package.json' -delete && \
    find packages -mindepth 2 -type d -empty -delete

# Install production dependencies only
RUN pnpm install --frozen-lockfile --prod

# Copy built application from builder
COPY --from=builder /app/apps/${APP_NAME}/dist ./apps/${APP_NAME}/dist
COPY --from=builder /app/packages ./packages

# Set working directory to the app
WORKDIR /app/apps/${APP_NAME}

# Run as non-root user for security
USER node

# Start the application
CMD ["node", "dist/main.js"]